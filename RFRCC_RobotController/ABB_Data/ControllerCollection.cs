using ABB.Robotics.Controllers;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Net;

namespace RFRCC_RobotController.ABB_Data
{
    /// <summary>
    /// Collection of controller info vital for connecting to a controller. Generated by Robot Controller Stream Scanner
    /// </summary>
    public class ControllerCollection : IEnumerable<NetworkControllerInfo>, IList<NetworkControllerInfo>
    {
        internal List<NetworkControllerInfo> _controllerInfos = new List<NetworkControllerInfo>();
        internal bool _IsReadOnly = true;
        /// <summary>
        /// Return ControllerInfo List Item
        /// </summary>
        /// <param name="index">List item position of return ControllerInfo</param>
        /// <returns></returns>
        public NetworkControllerInfo this[int index] 
        { 
            get => _controllerInfos[index]; 
            set => throw new NotImplementedException(); 
        }

        public ControllerCollection(ControllerInfoCollection controllerInfos)
        {
            for (int i = 0; i < controllerInfos.Count; i++)
            {
                _controllerInfos.Add(new NetworkControllerInfo(controllerInfos[i]));
            }
            
        }

        public int Count => _controllerInfos.Count;

        public bool IsReadOnly => _IsReadOnly;

        /// <summary>
        /// Not Allowed
        /// </summary>
        /// <param name="item"></param>
        public void Add(NetworkControllerInfo item)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Adds a controller from an ABB controller info class
        /// </summary>
        /// <param name="item">ABB ControllerInfo to be added</param>
        public void Add(ControllerInfo item)
        {
            _controllerInfos.Add(new NetworkControllerInfo(item));
        }

        /// <summary>
        /// Adds all controllers from an ABB controller info collection class
        /// </summary>
        /// <param name="items">Collection of ABB ControllerInfo's to be added</param>
        public void Add(ControllerInfoCollection items)
        {
            for (int i = 0; i < items.Count; i++)
            {
                _controllerInfos.Add(new NetworkControllerInfo(items[i]));
            }
        }

        /// <summary>
        /// Not Allowed
        /// </summary>
        public void Clear()
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns comparision if item is contained
        /// </summary>
        /// <param name="item">Controller for comparison</param>
        /// <returns></returns>
        public bool Contains(NetworkControllerInfo item)
        {
            return _controllerInfos.Contains(item);
        }

        public void CopyTo(NetworkControllerInfo[] array, int arrayIndex)
        {
            _controllerInfos.CopyTo(array, arrayIndex);
        }

        public IEnumerator<NetworkControllerInfo> GetEnumerator()
        {
            return _controllerInfos.GetEnumerator();
        }

        /// <summary>
        /// Returns the index of the supplied item within the list
        /// </summary>
        /// <param name="item">Network Controller info to be compared</param>
        /// <returns></returns>
        public int IndexOf(NetworkControllerInfo item)
        {
            return _controllerInfos.IndexOf(item);
        }

        /// <summary>
        /// Not Allowed
        /// </summary>
        /// <param name="index"></param>
        /// <param name="item"></param>
        public void Insert(int index, NetworkControllerInfo item)
        {
            _controllerInfos.Insert(index, item);
            throw new NotSupportedException();
        }

        /// <summary>
        /// Not Allowed
        /// </summary>
        /// <param name="item"></param>
        /// <returns></returns>
        public bool Remove(NetworkControllerInfo item)
        {
            throw new NotSupportedException();
        }

        /// <summary>
        /// Not Allowed
        /// </summary>
        /// <param name="index"></param>
        public void RemoveAt(int index)
        {
            throw new NotSupportedException();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return _controllerInfos.GetEnumerator();
        }
    }

    /// <summary>
    /// Controller information of online machine
    /// </summary>
    public class NetworkControllerInfo
    {
        public NetworkControllerInfo(ControllerInfo ABBControllerInfo)
        {
            SystemId = ABBControllerInfo.SystemId;
            IsVirtual = ABBControllerInfo.IsVirtual;
            IPAddress = ABBControllerInfo.IPAddress;
            VersionName = ABBControllerInfo.VersionName;
            Version = ABBControllerInfo.Version;
            BaseDirectory = ABBControllerInfo.BaseDirectory;
            HostName = ABBControllerInfo.HostName;
            NetscanId = ABBControllerInfo.NetscanId;
            MacAddress = ABBControllerInfo.MacAddress;
            SystemName = ABBControllerInfo.SystemName;
            RobApiPort = ABBControllerInfo.RobApiPort;
            RunLevel = ABBControllerInfo.RunLevel;
            Id = ABBControllerInfo.Id;
            ControllerName = ABBControllerInfo.ControllerName;
            Availability = ABBControllerInfo.Availability;
            WebServicesPort = ABBControllerInfo.WebServicesPort;
            _ABBControllerInfo = ABBControllerInfo;
        }

        internal ControllerInfo _ABBControllerInfo;

        /// <summary>
        /// Gets the system id of the controller.
        /// </summary>
        public Guid SystemId { get; }

        /// <summary>
        /// Gets a flag to indicate if the controller is virtual or real.
        /// </summary>
        public bool IsVirtual { get; }

        /// <summary>
        /// Gets the IP address of the controller.
        /// </summary>
        public IPAddress IPAddress { get; }

        /// <summary>
        /// Gets the RobotWare version as a string
        /// </summary>
        /// <remarks>
        /// Supported from RW 6.03
        /// </remarks>
        public string VersionName { get; }

        /// <summary>
        /// Gets the version of the system on the controller.
        /// </summary>
        public Version Version { get; }

        /// <summary>
        /// Gets the base directory of a virtual controller.
        /// </summary>
        public DirectoryInfo BaseDirectory { get; }

        /// <summary>
        /// Gets the host name of the controller.
        /// </summary>
        public string HostName { get; }

        /// <summary>
        /// Gets the netscan id of the object. Not for public use.
        /// </summary>
        public int NetscanId { get; }

        /// <summary>
        /// Gets the mac address of the controller.
        /// </summary>
        public string MacAddress { get; }

        /// <summary>
        /// Gets the system name of the controller.
        /// </summary>
        public string SystemName { get; }

        /// <summary>
        /// ABB internal use only
        /// </summary>
        public int RobApiPort { get; }

        /// <summary>
        /// Get the RunLevel of the controller.
        /// </summary>
        public Level RunLevel { get; }

        /// <summary>
        /// Get the Id of the controller.
        /// </summary>
        public string Id { get; }

        /// <summary>
        /// Gets the controller name of the controller.
        /// </summary>
        public string ControllerName { get; }

        /// <summary>
        /// Gets the Availability of the controller.
        /// </summary>
        public Availability Availability { get; }

        /// <summary>
        /// Returns the TCP port number for a virtual controller when using Robot Web Services.
        /// </summary>
        /// <remarks>
        /// Supported from RobotWare 6.03.01.
        /// </remarks>
        public int WebServicesPort { get; }

        


        //
        // Summary:
        //     Combines the two other equals operations.
        //
        // Parameters:
        //   obj:
        //     Object to compare with.
        //
        // Returns:
        //     True if the system ids are equal.
        public override bool Equals(object obj)
        {
            throw new NotImplementedException();
        }

        //
        // Summary:
        //     Checks if this object has same systemId as the provided info object.
        //
        // Parameters:
        //   info:
        //     ControllerInfo object to compare two.
        //
        // Returns:
        //     True if the systemId is same on both objects.
        public bool Equals(ControllerInfo info)
        {
            throw new NotImplementedException();
        }

        //
        // Summary:
        //     Checks if this object system id is equal to the provided Guid.
        //
        // Parameters:
        //   systemId:
        //     Guid to compare two.
        //
        // Returns:
        //     True if this objects SystemId is equal as systemId.
        public bool Equals(Guid systemId)
        {
            throw new NotImplementedException();
        }

        //
        // Summary:
        //     Gets the hash code for this object. Based on the system id.
        public override int GetHashCode()
        {
            throw new NotImplementedException();
        }

        //
        // Summary:
        //     Compares two ControllerInfo objects for equility.
        //
        // Parameters:
        //   co1:
        //     Object 1.
        //
        //   co2:
        //     Object 2.
        //
        // Returns:
        //     True if both objects have the same system id.
        public static bool operator ==(NetworkControllerInfo co1, NetworkControllerInfo co2)
        {
            throw new NotImplementedException();
        }

        //
        // Summary:
        //     Compares two ControllerInfo objects for in equility.
        //
        // Parameters:
        //   co1:
        //     Object 1.
        //
        //   co2:
        //     Object 2.
        //
        // Returns:
        //     True if both doesn't have the same system id.
        public static bool operator !=(NetworkControllerInfo co1, NetworkControllerInfo co2)
        {
            throw new NotImplementedException();
        }
    }

}
